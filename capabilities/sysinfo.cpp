// System Information
// Compile Command: sudo x86_64-w64-mingw32-g++ -o sysinfo.exe sysinfo.cpp -static


#include <windows.h>
#include <iostream>

int main()
{
    // Retrieve basic system information
    SYSTEM_INFO sysInfo;
    ZeroMemory(&sysInfo, sizeof(SYSTEM_INFO));
    GetSystemInfo(&sysInfo);

    std::cout << "=== System Information ===" << std::endl;

    // Processor architecture
    std::cout << "Processor Architecture: ";
    switch (sysInfo.wProcessorArchitecture)
    {
    case PROCESSOR_ARCHITECTURE_AMD64:
        std::cout << "x64 (AMD or Intel)" << std::endl;
        break;
    case PROCESSOR_ARCHITECTURE_ARM:
        std::cout << "ARM" << std::endl;
        break;
    case PROCESSOR_ARCHITECTURE_IA64:
        std::cout << "Intel Itanium-based" << std::endl;
        break;
    case PROCESSOR_ARCHITECTURE_INTEL:
        std::cout << "x86" << std::endl;
        break;
    default:
        std::cout << "Unknown Architecture" << std::endl;
        break;
    }

    // Number of logical processors
    std::cout << "Number of Processors: " << sysInfo.dwNumberOfProcessors << std::endl;

    // Page size
    std::cout << "Page Size: " << sysInfo.dwPageSize << " bytes" << std::endl;

    // Application address range
    std::cout << "Minimum Application Address: " << sysInfo.lpMinimumApplicationAddress << std::endl;
    std::cout << "Maximum Application Address: " << sysInfo.lpMaximumApplicationAddress << std::endl;

    // Retrieve memory status information
    MEMORYSTATUSEX memStatus;
    memStatus.dwLength = sizeof(MEMORYSTATUSEX);
    if (GlobalMemoryStatusEx(&memStatus))
    {
        std::cout << "\n=== Memory Information ===" << std::endl;
        std::cout << "Total Physical Memory: " << memStatus.ullTotalPhys / (1024 * 1024) << " MB" << std::endl;
        std::cout << "Available Physical Memory: " << memStatus.ullAvailPhys / (1024 * 1024) << " MB" << std::endl;
        std::cout << "Total Virtual Memory: " << memStatus.ullTotalVirtual / (1024 * 1024) << " MB" << std::endl;
        std::cout << "Available Virtual Memory: " << memStatus.ullAvailVirtual / (1024 * 1024) << " MB" << std::endl;
    }
    else
    {
        std::cerr << "Error: Unable to retrieve memory information." << std::endl;
    }

    return 0;
}
