//nslookup
// Compile Command: sudo x86_64-w64-mingw32-g++  -o nslookup.exe nslookup.cpp -static -static-libstdc++ -ldnsapi -lws2_32


#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <windns.h>
#include <iostream>

// Link with the required libraries
#pragma comment(lib, "Dnsapi.lib")
#pragma comment(lib, "ws2_32.lib")

int main()
{
    // Initialize Winsock.
    WSADATA wsaData;
    int iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != 0)
    {
        std::cerr << "WSAStartup failed: " << iResult << std::endl;
        return 1;
    }

    // The domain to query
    const char* domain = "hello.iamironcat.com";
    PDNS_RECORD pDnsRecord = nullptr;

    // Query for A (IPv4) records.
    DNS_STATUS status = DnsQuery_A(
        domain,                // Domain name to query.
        DNS_TYPE_A,            // Query for A records.
        DNS_QUERY_STANDARD,    // Standard query options.
        nullptr,               // Use default DNS server list.
        &pDnsRecord,           // Receives the record list.
        nullptr                // Reserved.
    );

    if (status != 0)
    {
        std::cerr << "DnsQuery_A failed with error: " << status << std::endl;
        WSACleanup();
        return 1;
    }

    // Process and print the returned DNS records.
    PDNS_RECORD pRecord = pDnsRecord;
    while (pRecord != nullptr)
    {
        if (pRecord->wType == DNS_TYPE_A)
        {
            // Create an in_addr structure from the IP address.
            in_addr ipAddr;
            ipAddr.s_addr = pRecord->Data.A.IpAddress;
            std::cout << "IP Address: " << inet_ntoa(ipAddr) << std::endl;
        }
        pRecord = pRecord->pNext;
    }

    // Free the DNS record list allocated by DnsQuery_A.
    DnsRecordListFree(pDnsRecord, DnsFreeRecordList);

    // Clean up Winsock.
    WSACleanup();

    return 0;
}
